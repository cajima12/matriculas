package org.ayuncordoba.eseg.login;

import java.util.ArrayList;
import java.util.List;

import org.ayuncordoba.eseg.modelo.Rol;
import org.ayuncordoba.eseg.repositorio.UsuarioRepositorio;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;


@Service
@Transactional(readOnly=true)
public class CustomUserDetailsService implements UserDetailsService {
   
    @Autowired
    private UsuarioRepositorio usuarioRepositorio; 
    
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {

    	org.ayuncordoba.eseg.modelo.Usuario domainUser = usuarioRepositorio.findByUsername(username);
		if (domainUser == null) {
			throw new UsernameNotFoundException("El usuario no existe");
		}

		List<GrantedAuthority> auths = getGrantedAuthorities(domainUser.getRoles());
		if (!auths.isEmpty()) {
			boolean enabled = true;
			boolean accountNonExpired = true;
			boolean credentialsNonExpired = true;
			boolean accountNonLocked = true;

			return new SracUser(domainUser.getUsername(), domainUser.getPassword(), enabled, accountNonExpired, credentialsNonExpired, accountNonLocked, auths,
					domainUser);
		}

		throw new UsernameNotFoundException("No tiene permiso para acceder a esta aplicaci√≥n");
	}

	public static List<GrantedAuthority> getGrantedAuthorities(List<Rol> roles) {
		List<GrantedAuthority> authorities = new ArrayList<GrantedAuthority>();

		for (Rol rol : roles) {
			authorities.add(new SimpleGrantedAuthority(rol.getRol()));
			if ( !rol.getRol().equals( "ROLE_ADMIN" ) ) {
				authorities.clear();
				authorities.add(new SimpleGrantedAuthority(rol.getRol()));
				break;
			}
		}
		return authorities;
	}
}