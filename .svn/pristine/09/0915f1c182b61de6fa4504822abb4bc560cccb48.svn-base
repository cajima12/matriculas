package org.ayuncordoba.eseg.modelo;

import java.io.Serializable;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

@Entity
@Table(name="fases")
public class Fase implements Serializable {

	private static final long serialVersionUID = 7104124569848988164L;

	@Id
    @GeneratedValue(strategy=GenerationType.AUTO, generator="FASES_SEQ")
    @SequenceGenerator(name="FASES_SEQ", sequenceName="FASES_SEQ")
	private Long id;
	
	@Column(name="nombre")
	private String nombreFase;
	
	@ManyToOne
	@JoinColumn(name="metafases_id")
	private Metafase metafase;
	
	// bi-directional many-to-many association to Documentos
	@ManyToMany(mappedBy = "fases")
	private List<Actuacion> actuaciones;

	public Fase() {
		// TODO Auto-generated constructor stub
	}

	public Fase(String nombreFase, Metafase metafase) {
		this.nombreFase = nombreFase;
		this.metafase = metafase;
	}

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getNombreFase() {
		return nombreFase;
	}

	public void setNombreFase(String nombreFase) {
		this.nombreFase = nombreFase;
	}

	public Metafase getMetafase() {
		return metafase;
	}

	public void setMetafase(Metafase metafase) {
		this.metafase = metafase;
	}

	public List<Actuacion> getActuaciones() {
		return actuaciones;
	}

	public void setActuaciones(List<Actuacion> actuaciones) {
		this.actuaciones = actuaciones;
	}

	@Override
	public String toString() {
		return "Subfase [id=" + id + "]";
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		result = prime * result
				+ ((nombreFase == null) ? 0 : nombreFase.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Fase other = (Fase) obj;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		if (nombreFase == null) {
			if (other.nombreFase != null)
				return false;
		} else if (!nombreFase.equals(other.nombreFase))
			return false;
		return true;
	}
	
	
	
}
