package org.ayuncordoba.eseg.modelo;

import java.io.Serializable;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

@Entity
@Table(name="actuaciones")
public class Actuacion implements Serializable {

	private static final long serialVersionUID = 2283931860661822943L;

	@Id
	private String clave;
	
	private String situacion;
	
	private String siglas;
	
	private Boolean ver;
	
	private Boolean dependencia;
	
	private Boolean respuesta;
	
	@Column(name="fin_fase")
	private Boolean finFase;
	
	/**
	 * Indica si hay generación de remesas
	 */
	private boolean masivo;
	
	/**
	 * Indica si la gestión de las remesas correspondientes a esta actuacicón corresponde únicamente a los administradores 
	 */
	private boolean admin;
	
	/**
	 * Evento asociado a la actuación 
	 */
	private String evento;
	
	@Column(name="numero_vencimientos")
	private Integer numeroVencimientos;
	
	@Column(name="tipo_vencimiento")
	private String tipoVencimiento;
	
	//bi-directional many-to-many association to Fase
	@ManyToMany( fetch = FetchType.EAGER, cascade=CascadeType.ALL)
	@Fetch(value = FetchMode.SUBSELECT)
	@JoinTable( name="actuaciones_fases",
		joinColumns={ @JoinColumn(name="actuacion_id", nullable=false) },		
		inverseJoinColumns={ @JoinColumn(name="fase_id", nullable=false) } )
	private List<Fase> fases;	

	//bi-directional many-to-many association to GrafoPadres
	@ManyToMany( fetch = FetchType.EAGER, cascade=CascadeType.ALL)
	@Fetch(value = FetchMode.SUBSELECT)
	@JoinTable( name="grafo_padres",
		joinColumns={ @JoinColumn(name="padre_id", nullable=false, referencedColumnName="clave") },		
		inverseJoinColumns={ @JoinColumn(name="hijo_id", nullable=false, referencedColumnName="clave") } )
	private List<Actuacion> padres;

	//bi-directional many-to-many association to GrafoHijos
	@ManyToMany( fetch = FetchType.EAGER, cascade=CascadeType.ALL)
	@Fetch(value = FetchMode.SUBSELECT)
	@JoinTable( name="grafo_hijos",
		joinColumns={ @JoinColumn(name="padre_id", nullable=false, referencedColumnName="clave") },		
		inverseJoinColumns={ @JoinColumn(name="hijo_id", nullable=false, referencedColumnName="clave") } )
	private List<Actuacion> hijos;

	//bi-directional many-to-many association to GrafoHijos
	@ManyToMany( fetch = FetchType.EAGER, cascade=CascadeType.ALL)
	@Fetch(value = FetchMode.SUBSELECT)
	@JoinTable( name="actuaciones_documentos",
		joinColumns={ @JoinColumn(name="actuacion_id", nullable=false) },		
		inverseJoinColumns={ @JoinColumn(name="documento_id", nullable=false) } )
	private List<Documento> documentos;
	
	public Actuacion() {
	}

	public String getClave() {
		return clave;
	}

	public void setClave(String clave) {
		this.clave = clave;
	}

	public String getSituacion() {
		return situacion;
	}

	public void setSituacion(String situacion) {
		this.situacion = situacion;
	}

	public String getSiglas() {
		return siglas;
	}

	public void setSiglas(String siglas) {
		this.siglas = siglas;
	}

	public Boolean getVer() {
		return ver;
	}

	public void setVer(Boolean ver) {
		this.ver = ver;
	}

	public Boolean getDependencia() {
		return dependencia;
	}

	public void setDependencia(Boolean dependencia) {
		this.dependencia = dependencia;
	}

	public Boolean getRespuesta() {
		return respuesta;
	}

	public void setRespuesta(Boolean respuesta) {
		this.respuesta = respuesta;
	}


	public Integer getNumeroVencimientos() {
		return numeroVencimientos;
	}

	public void setNumeroVencimientos(Integer numeroVencimientos) {
		this.numeroVencimientos = numeroVencimientos;
	}

	public String getTipoVencimiento() {
		return tipoVencimiento;
	}

	public void setTipoVencimiento(String tipoVencimiento) {
		this.tipoVencimiento = tipoVencimiento;
	}

	public List<Fase> getFases() {
		return fases;
	}

	public void setFases(List<Fase> fases) {
		this.fases = fases;
	}

	public List<Actuacion> getPadres() {
		return padres;
	}

	public void setPadres(List<Actuacion> padres) {
		this.padres = padres;
	}

	public List<Actuacion> getHijos() {
		return hijos;
	}

	public void setHijos(List<Actuacion> hijos) {
		this.hijos = hijos;
	}

	public List<Documento> getDocumentos() {
		return documentos;
	}

	public void setDocumentos(List<Documento> documentos) {
		this.documentos = documentos;
	}

	public Boolean getFinFase() {
		return finFase;
	}

	public void setFinFase(Boolean finFase) {
		this.finFase = finFase;
	}

	@Override
	public String toString() {
		return "Actuacion [clave=" + clave + "]";
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + (admin ? 1231 : 1237);
		result = prime * result + ((clave == null) ? 0 : clave.hashCode());
		result = prime * result
				+ ((dependencia == null) ? 0 : dependencia.hashCode());
		result = prime * result + ((evento == null) ? 0 : evento.hashCode());
		result = prime * result + ((finFase == null) ? 0 : finFase.hashCode());
		result = prime * result + (masivo ? 1231 : 1237);
		result = prime
				* result
				+ ((numeroVencimientos == null) ? 0 : numeroVencimientos
						.hashCode());
		result = prime * result
				+ ((respuesta == null) ? 0 : respuesta.hashCode());
		result = prime * result + ((siglas == null) ? 0 : siglas.hashCode());
		result = prime * result
				+ ((situacion == null) ? 0 : situacion.hashCode());
		result = prime * result
				+ ((tipoVencimiento == null) ? 0 : tipoVencimiento.hashCode());
		result = prime * result + ((ver == null) ? 0 : ver.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Actuacion other = (Actuacion) obj;
		if (admin != other.admin)
			return false;
		if (clave == null) {
			if (other.clave != null)
				return false;
		} else if (!clave.equals(other.clave))
			return false;
		if (dependencia == null) {
			if (other.dependencia != null)
				return false;
		} else if (!dependencia.equals(other.dependencia))
			return false;
		if (evento == null) {
			if (other.evento != null)
				return false;
		} else if (!evento.equals(other.evento))
			return false;
		if (finFase == null) {
			if (other.finFase != null)
				return false;
		} else if (!finFase.equals(other.finFase))
			return false;
		if (masivo != other.masivo)
			return false;
		if (numeroVencimientos == null) {
			if (other.numeroVencimientos != null)
				return false;
		} else if (!numeroVencimientos.equals(other.numeroVencimientos))
			return false;
		if (respuesta == null) {
			if (other.respuesta != null)
				return false;
		} else if (!respuesta.equals(other.respuesta))
			return false;
		if (siglas == null) {
			if (other.siglas != null)
				return false;
		} else if (!siglas.equals(other.siglas))
			return false;
		if (situacion == null) {
			if (other.situacion != null)
				return false;
		} else if (!situacion.equals(other.situacion))
			return false;
		if (tipoVencimiento == null) {
			if (other.tipoVencimiento != null)
				return false;
		} else if (!tipoVencimiento.equals(other.tipoVencimiento))
			return false;
		if (ver == null) {
			if (other.ver != null)
				return false;
		} else if (!ver.equals(other.ver))
			return false;
		return true;
	}

	public boolean isMasivo() {
		return masivo;
	}

	public void setMasivo(boolean masivo) {
		this.masivo = masivo;
	}

	public boolean isAdmin() {
		return admin;
	}

	public void setAdmin(boolean admin) {
		this.admin = admin;
	}

	public String getEvento() {
		return evento;
	}

	public void setEvento(String evento) {
		this.evento = evento;
	}
	
	
	
}
