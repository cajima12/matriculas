package org.ayuncordoba.eseg.login;

import org.ayuncordoba.eseg.modelo.PeticionLogin;
import org.ayuncordoba.eseg.repositorio.PeticionLoginRepositorio;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;

public class ExternalAuthenticationManager  implements AuthenticationManager {

	
	private PeticionLoginRepositorio peticionLoginRepo;
	private UserDetailsService customUserDetailsService;
	
	public Authentication authenticate(Authentication authentication) throws AuthenticationException {
		if (authentication instanceof UsernamePasswordAuthenticationToken) {
			try {
				SracUser user = (SracUser) customUserDetailsService.loadUserByUsername(authentication.getName());
				if (user.getPassword().equals(authentication.getCredentials())) {
					return new UsernamePasswordAuthenticationToken(user, user.getPassword(), user.getAuthorities());
				} else {
					throw new BadCredentialsException("Contraseña incorrecta");	
				}
			} catch (UsernameNotFoundException e) {
				throw new BadCredentialsException("El usuario no existe en la aplicación @cuses");	
			}
		} else {
			throw new BadCredentialsException("La autentificación no es correcta");
		}
	}
	
	
	public Authentication authenticate(String authToken) throws AuthenticationException {
		PeticionLogin peticion = peticionLoginRepo.findOne(authToken);
		if (peticion == null) {
			throw new BadCredentialsException("No se encontró el token de autentificación " + authToken);
		}
		peticionLoginRepo.delete(peticion);
		return authenticate(new UsernamePasswordAuthenticationToken(peticion.getUsername(), peticion.getPassword()));
	}
	
	public void setCustomUserDetailsService(UserDetailsService customUserDetailsService) {
		this.customUserDetailsService = customUserDetailsService;
	}
	
	public void setPeticionLoginRepo(PeticionLoginRepositorio peticionLoginRepo) {
		this.peticionLoginRepo = peticionLoginRepo;
	}

}
